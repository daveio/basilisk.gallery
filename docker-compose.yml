---
networks:
  external_network: {}
  internal_network:
    internal: true
services:
  es:
    container_name: elasticsearch
    sysctls:
      - vm.max_map_count=524288
    environment:
      - ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true
      - xpack.license.self_generated.type=basic
      - xpack.security.enabled=false
      - xpack.watcher.enabled=false
      - xpack.graph.enabled=false
      - xpack.ml.enabled=false
      - bootstrap.memory_lock=true
      - cluster.name=es
      - discovery.type=single-node
      - thread_pool.write.queue_size=1000
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl --silent --fail localhost:9200/_cluster/health || exit 1',
        ]
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    networks:
      - external_network
      - internal_network
    ports:
      - 127.0.0.1:9200:9200
    restart: always
    ulimits:
      memlock:
        hard: -1
        soft: -1
      nofile:
        hard: 65536
        soft: 65536
    volumes:
      - elasticsearchStorage:/usr/share/elasticsearch/data:rw
  privoxy:
    container_name: privoxy
    restart: always
    depends_on:
      - tor
    image: sirboops/privoxy
    command: '/bin/sh -c "/opt/sbin/privoxy --no-daemon --user privoxy.privoxy /opt/config/privoxy.conf"'
    networks:
      - external_network
      - internal_network
    volumes:
      - privoxyStorage:/opt/config:rw
  sidekiq:
    environment:
      ALLOW_ACCESS_TO_HIDDEN_SERVICE: ${ALLOW_ACCESS_TO_HIDDEN_SERVICE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASS: ${DB_PASS}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      ES_ENABLED: ${ES_ENABLED}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      LOCAL_DOMAIN: ${LOCAL_DOMAIN}
      OTP_SECRET: ${OTP_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_REAL_HOST: ${REDIS_REAL_HOST}
      REDIS_REAL_PORT: ${REDIS_REAL_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      S3_ALIAS_HOST: ${S3_ALIAS_HOST}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENABLED: ${S3_ENABLED}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_HOSTNAME: ${S3_HOSTNAME}
      S3_PROTOCOL: ${S3_PROTOCOL}
      S3_REGION: ${S3_REGION}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      SINGLE_USER_MODE: ${SINGLE_USER_MODE}
      SMTP_AUTH_METHOD: ${SMTP_AUTH_METHOD}
      SMTP_ENABLE_STARTTLS: ${SMTP_ENABLE_STARTTLS}
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_OPENSSL_VERIFY_MODE: ${SMTP_OPENSSL_VERIFY_MODE}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SERVER: ${SMTP_SERVER}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      http_proxy: ${http_proxy}
    build: .
    # env_file: .env.production
    command: bundle exec sidekiq
    container_name: basilisk-glitch-sidekiq
    depends_on:
      # - es
      - privoxy
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep 'idekiq 6' || false"]
    image: basilisk-glitch
    networks:
      - external_network
      - internal_network
    pull_policy: build
    restart: always
    volumes:
      - mastodonStorage:/mastodon/public/system:rw
  socat:
    environment:
      REDIS_REAL_HOST: ${REDIS_REAL_HOST}
      REDIS_REAL_PORT: ${REDIS_REAL_PORT}
      REDIS_PORT: ${REDIS_PORT}
    container_name: socat
    image: alpine/socat
    restart: always
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep 'socat' || false"]
    command: tcp-listen:${REDIS_PORT},fork,reuseaddr openssl-connect:${REDIS_REAL_HOST}:${REDIS_REAL_PORT},verify=0
    networks:
      - external_network
      - internal_network
  streaming:
    environment:
      ALLOW_ACCESS_TO_HIDDEN_SERVICE: ${ALLOW_ACCESS_TO_HIDDEN_SERVICE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASS: ${DB_PASS}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      ES_ENABLED: ${ES_ENABLED}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      LOCAL_DOMAIN: ${LOCAL_DOMAIN}
      OTP_SECRET: ${OTP_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_REAL_HOST: ${REDIS_REAL_HOST}
      REDIS_REAL_PORT: ${REDIS_REAL_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      S3_ALIAS_HOST: ${S3_ALIAS_HOST}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENABLED: ${S3_ENABLED}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_HOSTNAME: ${S3_HOSTNAME}
      S3_PROTOCOL: ${S3_PROTOCOL}
      S3_REGION: ${S3_REGION}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      SINGLE_USER_MODE: ${SINGLE_USER_MODE}
      SMTP_AUTH_METHOD: ${SMTP_AUTH_METHOD}
      SMTP_ENABLE_STARTTLS: ${SMTP_ENABLE_STARTTLS}
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_OPENSSL_VERIFY_MODE: ${SMTP_OPENSSL_VERIFY_MODE}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SERVER: ${SMTP_SERVER}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      http_proxy: ${http_proxy}

    build: .
    # env_file: .env.production
    command: node ./streaming
    container_name: basilisk-glitch-streaming
    depends_on:
      # - es
      - privoxy
      - sidekiq
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1',
        ]
    image: basilisk-glitch
    networks:
      - external_network
      - internal_network
    ports:
      - 127.0.0.1:4000:4000
    pull_policy: build
    restart: always
  tor:
    container_name: tor
    restart: always
    image: sirboops/tor
    networks:
      - external_network
      - internal_network
  web:
    environment:
      ALLOW_ACCESS_TO_HIDDEN_SERVICE: ${ALLOW_ACCESS_TO_HIDDEN_SERVICE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASS: ${DB_PASS}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      ES_ENABLED: ${ES_ENABLED}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      LOCAL_DOMAIN: ${LOCAL_DOMAIN}
      OTP_SECRET: ${OTP_SECRET}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_REAL_HOST: ${REDIS_REAL_HOST}
      REDIS_REAL_PORT: ${REDIS_REAL_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT}
      S3_ALIAS_HOST: ${S3_ALIAS_HOST}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENABLED: ${S3_ENABLED}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_HOSTNAME: ${S3_HOSTNAME}
      S3_PROTOCOL: ${S3_PROTOCOL}
      S3_REGION: ${S3_REGION}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      SINGLE_USER_MODE: ${SINGLE_USER_MODE}
      SMTP_AUTH_METHOD: ${SMTP_AUTH_METHOD}
      SMTP_ENABLE_STARTTLS: ${SMTP_ENABLE_STARTTLS}
      SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_OPENSSL_VERIFY_MODE: ${SMTP_OPENSSL_VERIFY_MODE}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SERVER: ${SMTP_SERVER}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      http_proxy: ${http_proxy}
    build: .
    # env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    container_name: basilisk-glitch-web
    depends_on:
      # - es
      - privoxy
      - sidekiq
      - streaming
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -q --spider --proxy=off localhost:3000/health || exit 1',
        ]
    image: basilisk-glitch
    networks:
      - external_network
      - internal_network
    ports:
      - 127.0.0.1:3000:3000
    pull_policy: build
    restart: always
    volumes:
      - mastodonStorage:/mastodon/public/system:rw
version: '3'
volumes:
  # elasticsearchStorage:
  #   external: true
  mastodonStorage:
    external: true
  privoxyStorage:
    external: true
